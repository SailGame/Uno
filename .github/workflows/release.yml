name: Release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04]
    
    env:
      MY_INSTALL_DIR: ~/.local
      GRPC_VERSION: 1.32.0

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: 'recursive'
    
    - name: Cache grpc
      uses: actions/cache@v2
      id: grpc-cache
      with:
        path: ${{env.MY_INSTALL_DIR}}
        key: ${{ runner.os }}-grpc-${{ env.GRPC_VERSION }}

    - name: Set up dependencies
      if: steps.grpc-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt install -y protobuf-compiler libprotobuf-dev
        mkdir -p $MY_INSTALL_DIR
        git clone --recurse-submodules -b v${{ env.GRPC_VERSION }} https://github.com/grpc/grpc
        cd grpc
        mkdir -p cmake/build
        pushd cmake/build
        cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR -DBENCHMARK_ENABLE_TESTING=OFF ../..
        make -j 8
        make install

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      working-directory: ${{runner.workspace}}
      run: |
        cmake -E make_directory build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build/
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=release -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR
    
    - name: Cache externals
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/build/externals
        key: ${{ runner.os }}-build-${{ matrix.build_type }}-${{ hashFiles('externals/**/CMakeLists.txt') }}

    - name: Build Release
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: cmake --build . --config release -j 4

    - name: Test Release
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: |
        ctest -L UnoTest

    - name: Create package
      id: package
      working-directory: ${{runner.workspace}}
      run: |
        cp Uno/README.md build/
        cp Uno/LICENSE build/
        PACKAGE_NAME=sailgame.uno-provider.${GITHUB_REF#refs/tags/}.${{ matrix.os }}.tar.gz
        tar -czvf $PACKAGE_NAME -C build .
        echo ::set-output name=name::${PACKAGE_NAME}

    - name: Upload asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ../${{ steps.package.outputs.name }}
        asset_name: ${{ steps.package.outputs.name }}
        asset_content_type: application/gzip